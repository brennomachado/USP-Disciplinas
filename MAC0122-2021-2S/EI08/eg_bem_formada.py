# -*- coding: utf-8 -*-
"""eg_bem_formada.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rRaWd5rPGvMj9kK-DB5fcsgPOFVn6_VY
"""

# -*- coding: utf-8 -*-

#------------------------------------------------------------------
# LEIA E PREENCHA O CABEÇALHO 
#------------------------------------------------------------------

'''

    Nome: Brenno Pereira Machado
    NUSP: 6434401

    Nome: Matheus Fogaça Cichocki
    NUSP: 11809990

    Nome: Haoyu Chen
    NUSP: 12557122

    Nome: Gabriel Augusto Martins
    NUSP: 10801509

    Ao preencher esse cabeçalho com o meu nome e o meu número USP,
    declaro que todas as partes originais desse exercício programa
    foram desenvolvidas e implementadas por mim e que, portanto, não 
    constituem desonestidade acadêmica ou plágio.
    
    Entendo que trabalhos sem assinatura devem receber nota zero e, ainda
    assim, poderão ser punidos por desonestidade acadêmica.
    Declaro também que sou responsável por todas as cópias desse
    programa e que não distribui ou facilitei a sua distribuição.
    
    Estou ciente que os casos de plágio e desonestidade acadêmica
    estarão sujeitos às penalidades descritas na página da disciplina
    na seção "Sobre colaboração em MAC0122".

    Reconheço que utilizei as seguintes fontes externas ao conteúdo 
    utilizado e recomendado em MAC0122, ou recebi auxílio das pessoas
    listadas abaixo.

    - LISTA de fontes externas utilizadas (links ou referências como livros)
        - 

    - LISTA das pessoas que me auxiliaram a fazer esse trabalho
        - 
'''

ABRE = '([{'
FECHA = ')]}'

def main():
    ''' função para teste da função bem_formada
    '''

    print("\n###############################################################")
    print("###              LISTA E SEQUÊNCIAS BEM FORMADAS            ###")
    print("###   Esse programa usa uma lista como pilha para testar se ###")
    print("###   uma expressão tem () [] { } de forma balanceada       ###")
    print("###############################################################\n")

    sequencias = ["$ $ $","$ { $ }","( $ $ $ ) $”","[ $ { } $ ] $ ( $ $ $ $ ) $","$ $ { }","", " ( { } )", " { } ( - ) [ { } ( ) ]", "(a + { b } )-{2 *[ 3+4 ]}", "{ ( { x } ) } [ y ]",
         "[", "( { ) }", "{ ( { } } )", "( ( ( . ) )", " ] ", "{ ( { x } } [ y ] )"]

    for expressao in sequencias:
        if bem_formada(expressao):
            resultado = 'É'
        else:
            resultado = 'NÃO É'

        expressao+="'"
        print(f"'{expressao:30} {resultado:8} bem formada")

        ### Mais testes do GRUPO ###

    t1 = "(a+ {b })-{2*[3+4]}" 
    t2 = "( ( (  ) " 
    t3 = " { ( { x } )  } [ y ]" 
    t4 = " { ( { x }  } [ y ] )" 
    t5 = " ( { } )"
    t6 = " { } ( - ) [ { } (   ) ]"
    t7 = " (a + { b } )-{2 *[ 3+4 ]} "
    t8 = "{ ( { x } ) } [ y ]"


    print(' ')
    print('TESTES DO DOC')
    print(' ')
    
    print(f'{t1}' + " é bem formado?" + f' {bem_formada(t1)}' + ' -> True')
    print(f'{t2}' + " é bem formado?" + f' {bem_formada(t2)}' + ' -> False')
    print(f'{t3}' + " é bem formado?" + f' {bem_formada(t3)}' + ' -> True')
    print(f'{t4}' + " é bem formado?" + f' {bem_formada(t4)}' + ' -> False')
    ##faltou essa parte

    print(' ')
    print('TESTES DO ENUNCIADO  QUE SÃO TRUE')
    print(' ')

    print(f'{t5}' + " é bem formado?" + f' {bem_formada(t5)}' + ' -> True')
    print(f'{t6}' + " é bem formado?" + f' {bem_formada(t6)}' + ' -> True')
    print(f'{t7}' + " é bem formado?" + f' {bem_formada(t7)}' + ' -> True')
    print(f'{t8}' + " é bem formado?" + f' {bem_formada(t8)}' + ' -> True') 

    print(' ')
    print('TESTES DO ENUNCIADO  QUE SÃO FALSE')
    print(' ')

    t9 = '['
    t10 = '( { ) }'
    t11 = '{ ( { } } )'
    t12 = '( ( ( . ) )'
    t13 = ' ] '
    t14 = '{ ( { x } } [ y ] )'

    print(f'{t9}' + " é bem formado?" + f' {bem_formada(t9)}' + ' -> False')
    print(f'{t10}' + " é bem formado?" + f' {bem_formada(t10)}' + ' -> False')
    print(f'{t11}' + " é bem formado?" + f' {bem_formada(t11)}' + ' -> False')
    print(f'{t12}' + " é bem formado?" + f' {bem_formada(t12)}' + ' -> False')  
    print(f'{t13}' + " é bem formado?" + f' {bem_formada(t13)}' + ' -> False')
    print(f'{t14}' + " é bem formado?" + f' {bem_formada(t14)}' + ' -> False')


    print("## BINARIOS###")
    print(f"convertendo 11 para bin: {dec2bin(11)}")
    print(f"convertendo 1011 para dec: {bin2dec(1100010001)}")
    
# ---------------------------------------------------------

def bem_formada( seq ):
    ''' (str) -> bool
    Recebe uma string seq contendo uma sequência formada pelos
    caracteres '()[]{}'. 
    Retorna True caso a sequência esteja bem formada e False em
    caso contrário.
    A função deve ignorar caracteres diferentes de '()[]{}' 
    sem resultar em erro.
    Exemplos:
    >>> bem_formada( "(a+ {b })-{2*[3+4]}" )
    True
    >>> bem_formada( "( ( (  ) " )
    False
    >>> bem_formada( " { ( { x } )  } [ y ]" )
    True
    >>> bem_formada( "    { ( { x }  } [ y ] )" )
    False
    '''

    lst=[]
    for i in seq:
        if i=='$':
            if lst==[] or lst[-1]!='$':
                lst+=[i]
            elif lst[-1]=='$':
                lst.pop()
        elif i in ABRE:
            lst+=[i]      
        elif i in FECHA:
            F=FECHA+"$"
            A=ABRE+"$"
            if len(lst)==0:
                return False
            elif F.index(i)!=A.index(lst[-1]):
                return False
            lst.pop()
    return len(lst)==0

def bin2dec( bin ):
    ''' (int) -> int
    Recebe um inteiro que representa um número na base binária e 
    retorna outro inteiro que representa o mesmo número na base decimal.
    Exemplo:
    >>> bin2dec( 11 )
    3
    >>> bin2dec( 1110 )
    14
    '''
    dec = 0
    i = 0
    while bin > 0:
        dec = dec + (bin%10)*(2**i)
        bin = bin//10
        i+=1
    return dec
    

def dec2bin( dec ):
    ''' (int) -> int
    Recebe um inteiro que representa um número na base decimal e 
    retorna outro inteiro que representa o mesmo número na base binária.
    Exemplo:
    >>> dec2bin( 11 )
    1011
    >>> dec2bin( 5 )
    101
    '''
    bi = []
    a = 0
    
    while dec > 0:
        r = dec%2
        bi.append(r)
        dec = dec//2

    for i in range(len(bi)-1,-1,-1):
        a += bi[i] * 10**i
    return a


# ---------------------------------------------------------

if __name__ == '__main__':
    main()



