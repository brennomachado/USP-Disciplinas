# -*- coding: utf-8 -*-
"""eg_pilha.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cxGEvATpzH8zRS1cdtTCusqO1vqF3Qob
"""

# -*- coding: utf-8 -*-


#------------------------------------------------------------------
# LEIA E PREENCHA O CABEÇALHO 
#------------------------------------------------------------------

'''

    Nome: Brenno Pereira Machado 
          Gabriela Berndt Penteado 9913679
          Rodrigo Dobies Garcia 12556653
    NUSP: 

    Ao preencher esse cabeçalho com o meu nome e o meu número USP,
    declaro que todas as partes originais desse exercício programa
    foram desenvolvidas e implementadas por mim e que, portanto, não 
    constituem desonestidade acadêmica ou plágio.
    
    Entendo que trabalhos sem assinatura devem receber nota zero e, ainda
    assim, poderão ser punidos por desonestidade acadêmica.
    Declaro também que sou responsável por todas as cópias desse
    programa e que não distribui ou facilitei a sua distribuição.
    
    Estou ciente que os casos de plágio e desonestidade acadêmica
    estarão sujeitos às penalidades descritas na página da disciplina
    na seção "Sobre colaboração em MAC0122".

    Reconheço que utilizei as seguintes fontes externas ao conteúdo 
    utilizado e recomendado em MAC0122, ou recebi auxílio das pessoas
    listadas abaixo.

    - LISTA de fontes externas utilizadas (links ou referências como livros)
        - 

    - LISTA das pessoas que me auxiliaram a fazer esse trabalho
        - 
'''


def main():

    print(f"Roma me tem amor é palíndromo = {palindromo( 'Roma me tem amor' )} Resposta esperda é True")
    print(f"Hannah é palíndromo = {palindromo( 'Hannah' )} Resposta esperda é True")
    print(f"Programação é palíndromo = {palindromo( 'Programação' )} Resposta esperda é False")
    print(f"olá é palíndromo = {palindromo( 'olá' )} Resposta esperda é False")
    print(f"acidência é palíndromo = {palindromo( 'acidência' )} Resposta esperda é False")
    print(f"omíssimo é palíndromo = {palindromo( 'omíssimo' )} Resposta esperda é True")

    '''Testa a classe Pilha e a função palíndromo'''
    x = Pilha()
    print(f"x.dados = {x.dados} --> []")
    print(f"x.vazia() = {x.vazia()} --> True")
    x.empilhe('pi')
    x.empilhe(3.1415)
    x.empilhe(False)
    print(f"x.dados = {x.dados}  --> ['pi', 3.1415, False]")
    x.desempilhe()
    x.empilhe(True)
    print(f"x.topo() = {x.topo()} --> True") 
    print(f"len(x) = {len(x)} --> 3")
    print(f"x.dados = {x.dados}  --> ['pi', 3.1415, True]")
    x.empilhe(-125)
    print(f"len(x) = {len(x)} --> 4")
    print(f"x.dados = {x.dados}  --> ['pi', 3.1415, True, -125]")
    print(f"x.vazia() = {x.vazia()} --> False")
    print(f"x.desempilhe() = {x.desempilhe()} --> -125")
    x.empilhe('eita')
    x.empilhe('eita!')
    print(f"x.desempilhe() = {x.desempilhe()} --> 'eita!'")
    print(f"len(x) = {len(x)} --> 4") 
    print(f"x.dados = {x.dados}  --> ['pi',3.1415, True, 'eita']")
    x.desempilhe()
    x.desempilhe()
    x.desempilhe()
    print(f"x.vazia() = {x.vazia()} --> False")
    x.desempilhe()
    print(f"x.vazia() = {x.vazia()} --> True")

    '''Testes bem_formada'''
    print(f"bem_formada('(') = {bem_formada('(')} e deveria ser False")
    print(f"bem_formada(')(') = {bem_formada(')(')} e deveria ser False")
    print(f"bem_formada('(()))(') = {bem_formada('(()))(')} e deveria ser False")
    print(f"bem_formada('()()') = {bem_formada('()()')} e deveria ser True")
    print(f"bem_formada('(())') = {bem_formada('(())')} e deveria ser True")

def testes():

    pil = Pilha()   ## cria uma Pilha vazia
    print(f"pil.dados = {pil.dados}  --> deve ser a lista vazia []")
    print(f"pil.vazia() = {pil.vazia()}  --> deve ser True")
    pil.empilhe('todos')
    pil.empilhe(4)
    pil.empilhe('paz')
    # Pilha.topo() apenas pega o valor no topo mas sem desempilher
    print(f"pil.topo() = {pil.topo()}  --> deve ser 'paz'") 
    pil.empilhe(True)
    print(f"len(pil) = {len(pil)} --> deve ser 4")  ## implemente o método __len__
    print(f"pil.vazia() = {pil.vazia()}  --> deve ser False")
    print(f"pil.dados = {pil.dados}  --> deve ser ['todos', 4, 'paz', True]")
    pil.empilhe(2.7)
    print(f"pil.desempilhe() = {pil.desempilhe()} --> deve ser 2.7")
    print(f"pil.desempilhe() = {pil.desempilhe()} --> deve ser True")
    print(f"len(pil) = {len(pil)} --> deve ser 3") 
    print(f"pil.dados = {pil.dados}  --> deve ser ['todos', 4, 'paz']")
## ==================================================================

def bem_formada( s ):
    ''' (str) -> bool
    recebe uma string s contendo uma sequência de abre e fecha parênteses
    e retorna True caso a sequência esteja bem formada e False caso contrário.

    Exemplos:
    >>> bem_formada('(')
    False
    >>> bem_formada(')(')
    False
    >>> bem_formada('(()))(')
    False
    >>> bem_formada('()()')
    True
    >>> bem_formada('(())')
    True
    '''

    p = Pilha()
    balanceada = True
    i = 0
    tam = len(s)

    while i < tam and balanceada:
      digito = s[i]
      if digito == "(":
        p.empilhe(digito)
      else:
        if p.vazia():
          balanceada = False
        else:
          p.desempilhe()
      i = i+1

    if balanceada and p.vazia():
      return True
    else:
      return False



## Escreva a sua função palindromo()

def palindromo( s ):
    ''' recebe uma string e retorna True caso a string seja um palíndromo,
    e retorna False caso contrário'''
    
    s = s.lower().replace(' ','').replace('\n','').replace('\t','')
    s = s.replace('.','').replace(',','').replace(';','').replace('-','')
    s = s.replace('á','a').replace('à','a').replace('ã','a').replace('â','a')
    s = s.replace('é','e').replace('ê','e')
    s = s.replace('ó','o').replace('õ','o').replace('ô','o')
    s = s.replace('í' , 'i')
    
    
    ordemCerta = Pilha()
    ordemCerta_aux = Pilha()
    aoContrario = Pilha()
    pal = True
    
    for i in range(len(s)):
        ordemCerta.empilhe(s[i])  
        ordemCerta_aux.empilhe(s[i])  

    for i in range(len(s)):
        aoContrario.empilhe(ordemCerta_aux.desempilhe())
        
    for i in range(len(s)):
        if ordemCerta.topo() == aoContrario.topo():
            pal = True
        else:
            pal = False   
        ordemCerta.desempilhe()
        aoContrario.desempilhe()
        if pal == False:
            break
    
    return pal


## ==================================================================
##
class Pilha:

    def __init__(self):
        ''' (Pilha) --> None 
    
        Chamado pelo construtor da classe.
    
        Recebe uma referência `self` ao objeto que está sendo
        construído/montado
        '''
    
        self.dados = []
        
    def __str__(self):
        ''' (Pilha) --> str
        
        Recebe uma referencia `self` a um objeto da classe Fraction e
        cria e retorna a string que representa o objeto.

        Utilizado por print() para exibir o objeto.
        Função str() retorna a string criada pelo método __str__() da classe
        '''
        
        return f"{self.dados}"
        
    def vazia(self):
        ''' (Pilha) --> bool
        
        Verifica se a pilha está vazia
        '''
        
        return self.dados == []
    
    def empilhe(self, item):
        '''(Pilha, qualquer tipo) --> None
        
        Insere item no topo da pilha
        '''
        
        self.dados.append(item)
        
    def desempilhe(self):
        '''(Pilha) --> qualquer tipo
        
        retira o elemento do topo da pilha e o retorna
        '''
        return self.dados.pop()
        
    def __len__(self):
        '''(Pilha) --> int
        
        verifica o tamanho da pilha e retorna esse valor
        '''
        return len(self.dados)
        
    def topo(self):
        '''(Pilha) --> qualquer tipo
        
        retorna o elemento que está no topo da pilha
        '''
        
        return self.dados[len(self.dados)-1]
## ==================================================================
## Escreva outras funções e classes caso desejar


## ==================================================================
if __name__ == '__main__':
    testes()
    main()