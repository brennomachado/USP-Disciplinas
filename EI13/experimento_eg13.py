# -*- coding: utf-8 -*-
"""experimento_eg13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-XiQxcgDLlBeZk8D6qdtlE_LjNx6oFYQ
"""

'''
Experimento EG13

Nome: Brenno Pereira Machado
NUSP: -

Nome: Juan German Cornelio Palma
NUSP: -

Nome: Rafael Lopes Costa Alves Pinto
NUSP: -

Qual a relação de desempenho entre as versões 
iterativa e vetorizada do método blend?

Para responder essa pergunta:

1) copie o código do experimento para um arquivo "experimento.py"
no mesmo diretório de seu eg_npimagem.py
2) baixe as imagens darwin.png e monkey.png no mesmo diretório.

Abra o arquivo experimento.py no Colab, Spyder ou IDE de
sua preferência. Antes de executar, leia o código e complete 
as lacunas com valores apropriados para gerar uma sequência 
de imagens (vídeo) semelhante ao exemplo do enunciado.
'''

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.animation as animation

from timeit import default_timer as timer

from eg_npimagem import NPImagem

def main():
    darwin = load_image('darwin.png')
    monkey = load_image('monkey.png')

    n = 30          ## LACUNA 1 --->  use diferentes valores de n
    video_v = [None]*(n*2)

    novo_alfa = 0   ## LACUNA 2 ---> qual o valor de alfa para criar o efeito 
    incremento = 1/n
    ALFA =  1 

    start = timer()
    for i in range(n):  
           
        img = darwin.blend(monkey, novo_alfa)
        video_v[i] = video_v[2*n-1-i] = img
        novo_alfa+=incremento
    end = timer()

    difv = end-start
    print(f"tempo médio para calcular {n} blend vetorizado: {difv/n}")

    start = timer()
    video_i = [None]*(n*2)

    novo_alfa = 0   ## LACUNA 3 ---> qual o valor de alfa para criar o efeito 
    for i in range(n):  
        img = darwin.blend_iterativo(monkey, novo_alfa)
        video_i[i] = video_i[2*n-1-i] = img
        novo_alfa+=incremento
    end = timer()
    difi = end-start
    print(f"tempo médio para calcular {n} blend iterativo: {difi/n}")

    print("\n+++++")
    print(f"razão tempo iterativo / vetorizado: {difi/difv}")

    print("\n+++++")
    print("Video criado por blend vetorizado")
    print("Feche a janela do vídeo para continuar ...")
    mostre_animacao(video_v)

    print("\n+++++")
    print("Video criado por blend iterativo")
    print("Feche a janela do vídeo para continuar ...")
    mostre_animacao(video_i)

    salve_animacao(video_i)

# ========================================================================
def load_image( fname, show = False ):
    ''' (str, bool) -> NPImagem
    Recebe o nome fname de um arquivo e carrega e retorna
    a NPImagem correspondente.

    '''
    image = mpimg.imread(fname)
    gray = np.array(image)[:,:,2] ## pega canal G da imagem RGB

    npi = NPImagem( (), gray )
    if show:
        print("Carreguei uma image com shape: ", npi.shape)
        print("Feche a janela para continuar...")
        plt.gray()
        plt.imshow(npi.data)
        plt.show()

    return npi

# ========================================================================
def converta( npimagens ):
    ''' (list) -> list
    recebe uma lista de objetos NPImagem e retorna uma lista de arrays
    do Numpy prontas para serem animadas.
    A função acessa o atributo data
    '''
    npimgs = []
    for pym in npimagens:
        npimgs.append( [plt.imshow( np.array( pym.data ), cmap='gray', animated=True)] )
    return npimgs

# ========================================================================
def mostre_animacao( npimagens = [], interval=50, blit=True, repeat_delay=1000 ):
    ''' (list) -> None
    Recebe uma lista npimagens de objetos do tipo NPImagem
    e cria e mostra uma animação dessas npimagens.
    '''
    fig = plt.figure()
    npimgs = converta( npimagens )
    ani = animation.ArtistAnimation(fig, npimgs, interval, blit, repeat_delay)
    plt.show()

# ========================================================================
def salve_animacao( pymagens = [], interval=50, blit=True, repeat_delay=1000 ):
    ''' (list) -> None
    Recebe uma lista de NPImagens 
    e cria e salva uma animação dessas NPImagens no arquivo "animation.gif".
    '''
    fig = plt.figure()
    npimgs = converta( pymagens )
    ani = animation.ArtistAnimation(fig, npimgs, interval, blit, repeat_delay)
    
    writer = animation.PillowWriter(fps=15)
    ani.save( 'animation.gif', writer=writer )

# ========================================================================
## ------------------------------------------------------------------


if __name__ == '__main__':
    main()