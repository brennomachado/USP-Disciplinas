# -*- coding: utf-8 -*-
"""eg_npimagem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1flJXLsLzFGKE5QVO5QGweNvT3XxFQ4c5
"""

# -*- coding: utf-8 -*-

#------------------------------------------------------------------
# LEIA E PREENCHA O CABEÇALHO 
#------------------------------------------------------------------

'''
    GRUPO: 2

    Nome: Brenno Pereira Machado
    NUSP: 6434401

    Nome: Mathuzalem Ferreira de Lima
    NUSP: 12689189

    Nome: Leticia Almeida Souza
    NUSP: 10388068

    Ao preencher esse cabeçalho com o meu nome e o meu número USP,
    declaro que todas as partes originais desse exercício programa
    foram desenvolvidas e implementadas por mim e que, portanto, não 
    constituem desonestidade acadêmica ou plágio.
    
    Entendo que trabalhos sem assinatura devem receber nota zero e, ainda
    assim, poderão ser punidos por desonestidade acadêmica.
    Declaro também que sou responsável por todas as cópias desse
    programa e que não distribui ou facilitei a sua distribuição.
    
    Estou ciente que os casos de plágio e desonestidade acadêmica
    estarão sujeitos às penalidades descritas na página da disciplina
    na seção "Sobre colaboração em MAC0122".

    Reconheço que utilizei as seguintes fontes externas ao conteúdo 
    utilizado e recomendado em MAC0122, ou recebi auxílio das pessoas
    listadas abaixo.

    - LISTA de fontes externas utilizadas (links ou referências como livros)
        - 

    - LISTA das pessoas que me auxiliaram a fazer esse trabalho
        - 
'''

## ==================================================================


import numpy as np

## ------------------------------------------------------------------
def main():

    lista = list(range(20))
    ar = np.array(lista).reshape(4,5)
    img1 = NPImagem( (0, 0), ar)  # 
    print(f"img1:\n{img1}")
    print(f"Shape de img1: {img1.shape}\n")

    img2 = NPImagem( (4, 3), 100)
    print(f"img2:\n{img2}")
    print(f"Shape de img2: {img2.shape}\n")

    img2[1,2] = -10
    print(f"img2[1,2]={img2[1,2]}")
    print(f"img2:\n{img2}\n")

    img3 = img2.crop() ## cria uma cópia
    print(f"img3:\n{img3}\n")

    img4 = img1.crop(0, 1, 3, 4)  
    print(f"img4:\n{img4}\n")

    img5 = NPImagem( (3,2) )
    print(f"img5:\n{img5}\n")

    img6 = img1.crop(1,2)
    print(f"img6:\n{img6}\n")


    print("\n\n###### TESTES EG: PINTE #######\n")

    lista = list(range(30))
    ar = np.array(lista).reshape(5,6)
    img1 = NPImagem( (0, 0), ar)  # 
    print(f"img1:\n{img1}")
    print(f"Shape de img1: {img1.shape}\n")

    img2 = NPImagem( (3, 2), 100)
    img3 = img2.crop() ## cria uma cópia
    img2[2,1] = -10
    print(f"img2[1,2]={img2[2,1]}")
    print(f"img2:\n{img2}\n")
    print(f"img3:\n{img3}\n")

    img1.pinte_retangulo(1,2,3,5,99)
    print(f"img1.pinte_retangulo(1,2,3,5,99):\n{img1}\n")

    img2.pinte_retangulo(-1,-2,1,2,88)
    print(f"img2.pinte_retangulo(-1,-2,1,2,88):\n{img2}\n")

    img3.pinte_retangulo(1,0,3,4,77)
    print(f"img3.pinte_retangulo(1,0,3,4,77):\n{img3}\n")


    print("\n\n###### TESTES EG: PASTE #######\n")
    img1.paste(img2, 1, 2)
    print(f"img1.paste(img2,1,2):\n{img1}\n")

    img1.paste(img3, 3, 5)
    print(f"img1.paste(img3,3,5):\n{img1}\n")

    img1.paste(img3, -1, -1)
    print(f"img1.paste(img3,-1,-1):\n{img1}\n")

## ------------------------------------------------------------------
class NPImagem:

    def __init__(self, shape, val=0):
        ''' (NPImagem, tuple, obj) -> None
        Constrói um objeto do tipo NPImagem com os atributos:
        self.data : variavel do tipo np.darray, valor(es) de 'val'
        self.shape: tupla que armazena as dimensões da matriz
        '''

        if type(val) is np.ndarray:
            self.data = val
            self.shape = val.shape
        else:
            self.data = np.full(shape, val)
            self.shape = shape
    
    # ---------------------------------------------------------------
    def pinte_retangulo(self, sup, esq, inf, dir, v=0):

      ''' (NPImagem, int, int, int, int, int) -> None 
      Recebe 4 inteiros que definem o canto superior-esquerdo (sup, esq) e
      o canto inferior-direito (inf,dir) de uma região retangular com 
      relação a posição (0,0) de self, ou seja, os cantos são "deslocamentos" 
      em pixeis com relação à origem.
      Esse método pinta, com o valor v, os pixeis de self que tenham sobreposição com o retângulo (sup,esq)x(inf,dir). 
      '''
      if sup < 0:
        sup = 0
      if esq < 0:
        esq = 0
      if inf < 0:
        inf = 0
      if dir < 0:
        dir = 0
      self.data[sup:inf, esq:dir] = v


    def paste(self, other, sup, esq):
      '''(NPImagem, NPImagem, int, int) -> None
      Recebe um objeto NPImagem other e par de inteiros (sup, esq) 
      que indica um deslocamento em relação à origem de self (posição (0,0)) 
      onde a NPImagem other deve ser sobreposta sobre self. Observe que
      esse deslocamento pode ser negativo. 
      '''
      

    # ---------------------------------------------------------------
    def __getitem__(self, key):
        ''' (NPImagem, tupla) -> self.data.dtype
        Recebe uma tupla key contendo a posição (lin, col)
        e retorna o item nessa posição em NPImagem.data[lin,col].
        '''

        lin, col = key
        return self.data[lin, col]

    # ---------------------------------------------------------------
    def __setitem__(self, key, valor):
        ''' (NPImagem, tupla, obj) -> None
        Recebe uma tupla key contendo a posição (lin, col)
        e um objeto valor e armazena o valor na posição self.data[lin,col].
        '''

        lin, col = key
        self.data[lin, col] = valor

    # ---------------------------------------------------------------
    def __str__(self):
        ''' (NPImagem) -> str
        Ao ser usada pela função 'print', deve exibir o mesma saída que
        a um objeto do tipo np.darray

        Exemplo: para self.data = np.full((2,3), 0)
        o método deve retornar a string 
        "[[ 0  0  0]
          [ 0  0  0]]" 
        '''

        return f"{self.data}"
        
    # ---------------------------------------------------------------
    def crop(self, sup=None, esq=None, inf=None, dir=None):
        '''(NPImagem, int, int, int int) -> NPImagem
        Recebe uma referência 'self' do tipo NPImagem e quatro numeros 
        inteiros (sup, esq, inf, dir). Retorna uma variavel 'copia' do
        tipo NPimagem que tem dimensões e valores iguais a fatia do 
        tipo np.array self.data[sup:inf,esq:dir]
        '''
        if not (sup or esq or inf or dir):
            copia = self.copia()
        else:
            copia = NPImagem((0,0),self.data[sup:inf,esq:dir].copy())
        
        return copia
    
    # ---------------------------------------------------------------
    def copia(self):
        '''(NPImagem) -> NPImagem
        Recebe uma referência 'self' do tipo NPImagem.
        Retorna uma cópia de 'self'
        '''

        copia_np = NPImagem((0,0), self.data.copy())
        
        return copia_np

## ==================================================================
if __name__ == '__main__':
    main()

